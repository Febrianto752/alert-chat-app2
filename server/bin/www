#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const { Server } = require("socket.io");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
var host = "0.0.0.0"
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = new Server(server, {
  cors: {
    origin: process.env.NODE_ENV === "production" ? false : ["http://localhost:5000"]
  },
});


// event ketika user melakukan koneksi ke socket.io
io.on("connection", (socket) => {
  // event ketika user join room
  socket.on("joinRoom", (room) => {
    socket.join(room);
    io.to(room).emit("receiveJoinRoom", `User ${socket.id.substring(0, 4)} Join Room ${room}`)
  })

  // event ketika user mengirim message 
  socket.on("sendMessage", (room, message) => {
    io.to(room).emit("receiveMessage", { room, message: `User ${socket.id.substring(0, 4)} : ${message}` })

  })

});


var indexRouter = require('./../routes/index');
app.use('/', indexRouter(io));


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, host);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      process.exit(1);
      break;
    case 'EADDRINUSE':
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log("Listening on " + bind)
  debug('Listening on ' + bind);
}
